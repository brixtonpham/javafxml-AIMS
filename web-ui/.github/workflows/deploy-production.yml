# AIMS Web Application - Production Deployment Pipeline
# Comprehensive CI/CD workflow for automated testing, building, and deployment

name: Deploy to Production

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/web-ui

jobs:
  # Static Analysis and Linting
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web-ui/package-lock.json

      - name: Install dependencies
        working-directory: web-ui
        run: npm ci

      - name: Run ESLint
        working-directory: web-ui
        run: npm run lint

      - name: Check code formatting
        working-directory: web-ui
        run: npx prettier --check .

      - name: TypeScript type checking
        working-directory: web-ui
        run: npx tsc --noEmit

  # Security Scanning
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        working-directory: web-ui
        run: npm audit --audit-level high

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'web-ui'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Unit and Integration Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-suite: [unit, integration, accessibility]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web-ui/package-lock.json

      - name: Install dependencies
        working-directory: web-ui
        run: npm ci

      - name: Run unit tests
        if: matrix.test-suite == 'unit'
        working-directory: web-ui
        run: npm run test:unit

      - name: Run integration tests
        if: matrix.test-suite == 'integration'
        working-directory: web-ui
        run: npm run test:integration

      - name: Run accessibility tests
        if: matrix.test-suite == 'accessibility'
        working-directory: web-ui
        run: npm run test:accessibility

      - name: Generate coverage report
        if: matrix.test-suite == 'unit'
        working-directory: web-ui
        run: npm run test:coverage

      - name: Upload coverage reports
        if: matrix.test-suite == 'unit'
        uses: codecov/codecov-action@v3
        with:
          directory: web-ui/coverage
          flags: unittests
          name: codecov-umbrella

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web-ui/package-lock.json

      - name: Install dependencies
        working-directory: web-ui
        run: npm ci

      - name: Install Playwright browsers
        working-directory: web-ui
        run: npx playwright install --with-deps

      - name: Build application
        working-directory: web-ui
        run: npm run build

      - name: Start preview server
        working-directory: web-ui
        run: npm run preview &

      - name: Wait for server
        run: npx wait-on http://localhost:3000

      - name: Run Playwright tests
        working-directory: web-ui
        run: npm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: web-ui/playwright-report/
          retention-days: 30

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web-ui/package-lock.json

      - name: Install dependencies
        working-directory: web-ui
        run: npm ci

      - name: Build application
        working-directory: web-ui
        run: npm run build

      - name: Analyze bundle size
        working-directory: web-ui
        run: npm run perf:bundle-size

      - name: Run Lighthouse CI
        working-directory: web-ui
        run: npm run perf:ci
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Build and Push Docker Image
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan, test, e2e-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: web-ui
          file: web-ui/docker/Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.aims.com
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying ${{ needs.build-and-push.outputs.image }} to staging"
          # Add actual deployment commands here
          # kubectl set image deployment/aims-web aims-web=${{ needs.build-and-push.outputs.image }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://aims.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        env:
          IMAGE: ${{ needs.build-and-push.outputs.image }}
        run: |
          echo "Deploying $IMAGE to production"
          # Add production deployment commands here
          # Example: Deploy using docker-compose
          # docker-compose -f web-ui/docker/docker-compose.production.yml pull
          # docker-compose -f web-ui/docker/docker-compose.production.yml up -d

      - name: Health check
        run: |
          echo "Running post-deployment health checks"
          # curl -f https://aims.com/health || exit 1

      - name: Notify deployment
        if: success()
        run: |
          echo "Production deployment successful!"
          # Send notification to team (Slack, email, etc.)

  # Post-deployment monitoring
  post-deployment:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()
    steps:
      - name: Monitor deployment
        run: |
          echo "Monitoring deployment metrics"
          # Add monitoring checks here
          # Check error rates, response times, etc.

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against production"
          # Add production smoke tests here