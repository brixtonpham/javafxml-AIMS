openapi: 3.0.3
info:
  title: AIMS Web Application API
  description: |
    Complete API specification for the AIMS (Internet Media Store) Web Application.
    
    This API provides comprehensive e-commerce functionality including:
    - Product catalog management
    - Shopping cart operations
    - Order processing and tracking
    - Payment integration with VNPay
    - User authentication and management
    - Administrative operations
    
    ## Authentication
    This API uses JWT Bearer token authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer your_jwt_token_here
    ```
    
    ## Rate Limiting
    API requests are rate limited per user:
    - General endpoints: 1000 requests/hour
    - Authentication: 10 requests/minute
    - File uploads: 100 requests/hour
    
  version: 1.0.0
  contact:
    name: AIMS Development Team
    email: dev@aims.com
  license:
    name: Proprietary
    url: https://aims.com/license

servers:
  - url: https://api.aims.com
    description: Production server
  - url: https://staging-api.aims.com
    description: Staging server
  - url: http://localhost:8080/api
    description: Development server

security:
  - BearerAuth: []

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with email and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: customer@example.com
              password: securePassword123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Invalidate current session token
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # Product Endpoints
  /products:
    get:
      tags:
        - Products
      summary: Get products
      description: Retrieve paginated list of products with optional filtering
      security: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: search
          in: query
          schema:
            type: string
        - name: category
          in: query
          schema:
            type: string
        - name: productType
          in: query
          schema:
            type: string
            enum: [Book, CD, DVD, LP]
        - name: minPrice
          in: query
          schema:
            type: number
        - name: maxPrice
          in: query
          schema:
            type: number
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'

  /products/{productId}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Retrieve detailed information about a specific product
      security: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Cart Endpoints
  /cart:
    get:
      tags:
        - Cart
      summary: Get user cart
      description: Retrieve current user's shopping cart
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'

  /cart/items:
    post:
      tags:
        - Cart
      summary: Add item to cart
      description: Add a product to the shopping cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToCartRequest'
      responses:
        '200':
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '400':
          description: Invalid request or insufficient stock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cart/items/{productId}:
    put:
      tags:
        - Cart
      summary: Update cart item quantity
      description: Update the quantity of a specific item in the cart
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCartItemRequest'
      responses:
        '200':
          description: Cart item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'

    delete:
      tags:
        - Cart
      summary: Remove item from cart
      description: Remove a specific item from the shopping cart
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Item removed from cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'

  # Order Endpoints
  /orders:
    get:
      tags:
        - Orders
      summary: Get user orders
      description: Retrieve paginated list of user's orders
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, confirmed, processing, shipped, delivered, cancelled]
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'

    post:
      tags:
        - Orders
      summary: Create new order
      description: Create a new order from cart items
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Invalid request or cart issues
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      description: Retrieve detailed information about a specific order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Payment Endpoints
  /payments/vnpay:
    post:
      tags:
        - Payments
      summary: Create VNPay payment
      description: Initialize VNPay payment process for an order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VNPayPaymentRequest'
      responses:
        '200':
          description: VNPay payment URL generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VNPayPaymentResponse'
        '400':
          description: Invalid payment request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /payments/vnpay/callback:
    get:
      tags:
        - Payments
      summary: VNPay payment callback
      description: Handle VNPay payment callback and update order status
      security: []
      parameters:
        - name: vnp_Amount
          in: query
          required: true
          schema:
            type: string
        - name: vnp_BankCode
          in: query
          schema:
            type: string
        - name: vnp_OrderInfo
          in: query
          required: true
          schema:
            type: string
        - name: vnp_ResponseCode
          in: query
          required: true
          schema:
            type: string
        - name: vnp_TxnRef
          in: query
          required: true
          schema:
            type: string
        - name: vnp_SecureHash
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCallbackResponse'

  # Admin Endpoints
  /admin/metrics:
    get:
      tags:
        - Admin
      summary: Get admin metrics
      description: Retrieve system metrics and statistics
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Metrics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminMetricsResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/products:
    get:
      tags:
        - Admin
      summary: Get products for admin
      description: Retrieve products with admin-specific information
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Admin products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminProductListResponse'

    post:
      tags:
        - Admin
      summary: Create new product
      description: Create a new product in the catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Authentication Schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: customer@example.com
        password:
          type: string
          minLength: 8
          example: securePassword123

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Login successful
        data:
          type: object
          properties:
            token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
            user:
              $ref: '#/components/schemas/User'

    # Product Schemas
    Product:
      type: object
      properties:
        id:
          type: string
          example: prod_123
        title:
          type: string
          example: "The Great Gatsby"
        price:
          type: number
          format: float
          example: 15.99
        category:
          type: string
          example: "Classic Literature"
        productType:
          type: string
          enum: [Book, CD, DVD, LP]
          example: Book
        author:
          type: string
          example: "F. Scott Fitzgerald"
        description:
          type: string
          example: "A classic American novel..."
        imageUrl:
          type: string
          example: "https://images.aims.com/products/great-gatsby.jpg"
        stockQuantity:
          type: integer
          example: 25
        isAvailable:
          type: boolean
          example: true
        specifications:
          type: object
          additionalProperties: true

    ProductListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Products retrieved successfully
        data:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        pagination:
          $ref: '#/components/schemas/Pagination'

    ProductResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Product retrieved successfully
        data:
          $ref: '#/components/schemas/Product'

    # Cart Schemas
    CartItem:
      type: object
      properties:
        productId:
          type: string
          example: prod_123
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          example: 2
        subtotal:
          type: number
          format: float
          example: 31.98

    Cart:
      type: object
      properties:
        id:
          type: string
          example: cart_456
        sessionId:
          type: string
          example: session_789
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        totalAmount:
          type: number
          format: float
          example: 31.98
        itemCount:
          type: integer
          example: 2

    CartResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Cart retrieved successfully
        data:
          $ref: '#/components/schemas/Cart'

    AddToCartRequest:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: string
          example: prod_123
        quantity:
          type: integer
          minimum: 1
          example: 2

    UpdateCartItemRequest:
      type: object
      required:
        - quantity
      properties:
        quantity:
          type: integer
          minimum: 0
          example: 3

    # Order Schemas
    Order:
      type: object
      properties:
        id:
          type: string
          example: order_789
        userId:
          type: string
          example: user_456
        status:
          type: string
          enum: [pending, confirmed, processing, shipped, delivered, cancelled]
          example: confirmed
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        totalAmount:
          type: number
          format: float
          example: 47.97
        deliveryInfo:
          $ref: '#/components/schemas/DeliveryInfo'
        paymentMethod:
          type: string
          example: VNPay
        createdAt:
          type: string
          format: date-time
          example: "2024-12-22T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-12-22T10:35:00Z"

    OrderItem:
      type: object
      properties:
        productId:
          type: string
          example: prod_123
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          example: 2
        price:
          type: number
          format: float
          example: 15.99
        subtotal:
          type: number
          format: float
          example: 31.98

    DeliveryInfo:
      type: object
      properties:
        recipientName:
          type: string
          example: "John Doe"
        phone:
          type: string
          example: "+84901234567"
        address:
          type: string
          example: "123 Main St, District 1"
        city:
          type: string
          example: "Ho Chi Minh City"
        province:
          type: string
          example: "Ho Chi Minh"
        deliveryFee:
          type: number
          format: float
          example: 15.99

    OrderListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Orders retrieved successfully
        data:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        pagination:
          $ref: '#/components/schemas/Pagination'

    OrderResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Order retrieved successfully
        data:
          $ref: '#/components/schemas/Order'

    CreateOrderRequest:
      type: object
      required:
        - cartSessionId
        - deliveryInfo
      properties:
        cartSessionId:
          type: string
          example: session_789
        deliveryInfo:
          $ref: '#/components/schemas/DeliveryInfo'

    # Payment Schemas
    VNPayPaymentRequest:
      type: object
      required:
        - orderId
        - amount
      properties:
        orderId:
          type: string
          example: order_789
        amount:
          type: number
          format: float
          example: 47.97
        returnUrl:
          type: string
          example: "https://aims.com/payment/result"

    VNPayPaymentResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: VNPay payment URL generated
        data:
          type: object
          properties:
            paymentUrl:
              type: string
              example: "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html?..."
            transactionRef:
              type: string
              example: txn_123456

    PaymentCallbackResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Payment processed successfully
        data:
          type: object
          properties:
            orderId:
              type: string
              example: order_789
            transactionId:
              type: string
              example: txn_123456
            status:
              type: string
              enum: [success, failed, pending]
              example: success

    # Admin Schemas
    AdminMetricsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Metrics retrieved successfully
        data:
          type: object
          properties:
            totalUsers:
              type: integer
              example: 1250
            totalOrders:
              type: integer
              example: 3420
            totalRevenue:
              type: number
              format: float
              example: 125000.50
            activeProducts:
              type: integer
              example: 890

    AdminProductListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Admin products retrieved successfully
        data:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Product'
              - type: object
                properties:
                  salesCount:
                    type: integer
                    example: 45
                  revenue:
                    type: number
                    format: float
                    example: 719.55
        pagination:
          $ref: '#/components/schemas/Pagination'

    CreateProductRequest:
      type: object
      required:
        - title
        - price
        - category
        - productType
      properties:
        title:
          type: string
          example: "New Product Title"
        price:
          type: number
          format: float
          example: 19.99
        category:
          type: string
          example: "Technology"
        productType:
          type: string
          enum: [Book, CD, DVD, LP]
          example: Book
        description:
          type: string
          example: "Product description..."
        author:
          type: string
          example: "Author Name"
        stockQuantity:
          type: integer
          example: 100

    # Common Schemas
    User:
      type: object
      properties:
        id:
          type: string
          example: user_456
        email:
          type: string
          format: email
          example: customer@example.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        role:
          type: string
          enum: [customer, admin, product_manager]
          example: customer

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 20
        total:
          type: integer
          example: 150
        totalPages:
          type: integer
          example: 8

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Operation completed successfully

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: An error occurred
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: email
              code:
                type: string
                example: INVALID_EMAIL
              message:
                type: string
                example: Please provide a valid email address

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Products
    description: Product catalog and inventory management
  - name: Cart
    description: Shopping cart operations
  - name: Orders
    description: Order processing and management
  - name: Payments
    description: Payment processing and VNPay integration
  - name: Admin
    description: Administrative operations and management