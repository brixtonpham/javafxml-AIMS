# AIMS Web Application - Nginx Server Configuration
# Production-optimized server block with security and performance settings

# Upstream backend API server
upstream api_backend {
    least_conn;
    server host.docker.internal:8080;
    # Add more backend servers for load balancing
    # server backend2:8080;
    # server backend3:8080;
    
    # Health check and failover
    keepalive 32;
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name _;
    
    # Health check endpoint (allow HTTP for load balancer health checks)
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Redirect all other HTTP traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# Main HTTPS server block
server {
    listen 443 ssl http2;
    server_name localhost;  # Update with actual domain in production
    
    # SSL Configuration (update paths in production)
    # ssl_certificate /etc/ssl/certs/aims.crt;
    # ssl_certificate_key /etc/ssl/private/aims.key;
    
    # Root directory for static files
    root /usr/share/nginx/html;
    index index.html;
    
    # Include security headers
    include /etc/nginx/conf.d/security-headers.conf;
    
    # Compression settings
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/css
        text/xml
        text/plain
        application/javascript
        application/json
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Static assets with aggressive caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options nosniff;
        
        # Enable CORS for fonts and assets
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, OPTIONS";
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept";
        
        # Optional: Enable Brotli compression for assets
        # brotli_static on;
        
        try_files $uri =404;
    }
    
    # API proxy to backend
    location /api/ {
        # Rate limiting for API endpoints
        limit_req zone=api burst=20 nodelay;
        
        # Proxy settings
        proxy_pass http://api_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Timeout settings
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        
        # Cache API responses (adjust as needed)
        proxy_cache_bypass $http_upgrade;
        proxy_no_cache $http_authorization;
        
        # CORS headers for API
        add_header Access-Control-Allow-Origin "$http_origin" always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
        add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Max-Age 86400;
            add_header Content-Type text/plain;
            add_header Content-Length 0;
            return 204;
        }
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Nginx status for monitoring (restrict access in production)
    location /nginx_status {
        stub_status on;
        access_log off;
        # allow 127.0.0.1;
        # allow 10.0.0.0/8;
        # deny all;
    }
    
    # Security: Block access to sensitive files
    location ~ /\.(ht|git|env) {
        deny all;
        return 404;
    }
    
    # Security: Block access to common admin paths
    location ~ ^/(admin|config|backup|logs)/ {
        deny all;
        return 404;
    }
    
    # Handle React Router (SPA routing)
    location / {
        # Rate limiting for general requests
        limit_req zone=general burst=10 nodelay;
        
        try_files $uri $uri/ @fallback;
        
        # Cache HTML files for a short time
        location ~* \.html$ {
            expires 5m;
            add_header Cache-Control "public, must-revalidate";
        }
    }
    
    # Fallback for SPA routing
    location @fallback {
        rewrite ^.*$ /index.html last;
    }
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        internal;
    }
    
    location = /50x.html {
        internal;
    }
    
    # Deny access to .php files (if any exist accidentally)
    location ~ \.php$ {
        deny all;
        return 404;
    }
}

# Additional server block for development/staging
server {
    listen 8080;
    server_name localhost;
    
    root /usr/share/nginx/html;
    index index.html;
    
    # Simplified configuration for development
    location / {
        try_files $uri $uri/ /index.html;
    }
    
    # API proxy for development
    location /api/ {
        proxy_pass http://api_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}