// AIMS Web Application Service Worker
// Provides offline functionality and caching for critical resources

const CACHE_NAME = 'aims-web-v1.0.0';
const STATIC_CACHE = 'aims-static-v1.0.0';
const DYNAMIC_CACHE = 'aims-dynamic-v1.0.0';
const API_CACHE = 'aims-api-v1.0.0';

// Resources to cache immediately on install
const STATIC_RESOURCES = [
  '/',
  '/index.html',
  '/favicon.ico',
  '/manifest.json',
  // Add critical CSS and JS files that will be generated by Vite
  // These will be automatically populated during build
];

// API endpoints to cache for offline functionality
const CACHEABLE_APIS = [
  '/api/products',
  '/api/categories',
  '/api/cart',
  '/api/auth/me',
];

// Resources that should always be fetched fresh (bypass cache)
const BYPASS_CACHE = [
  '/api/auth/login',
  '/api/auth/logout',
  '/api/auth/refresh',
  '/api/payment',
  '/api/orders/create',
];

// Maximum age for cached responses (in milliseconds)
const CACHE_MAX_AGE = {
  static: 24 * 60 * 60 * 1000, // 24 hours
  api: 15 * 60 * 1000, // 15 minutes
  dynamic: 60 * 60 * 1000, // 1 hour
};

// Install event - cache static resources
self.addEventListener('install', (event) => {
  console.log('[SW] Installing service worker...');
  
  event.waitUntil(
    caches.open(STATIC_CACHE)
      .then((cache) => {
        console.log('[SW] Caching static resources');
        return cache.addAll(STATIC_RESOURCES);
      })
      .then(() => {
        console.log('[SW] Service worker installed successfully');
        // Skip waiting to activate immediately
        return self.skipWaiting();
      })
      .catch((error) => {
        console.error('[SW] Failed to install service worker:', error);
      })
  );
});

// Activate event - clean up old caches
self.addEventListener('activate', (event) => {
  console.log('[SW] Activating service worker...');
  
  event.waitUntil(
    caches.keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            // Delete old cache versions
            if (cacheName !== STATIC_CACHE && 
                cacheName !== DYNAMIC_CACHE && 
                cacheName !== API_CACHE) {
              console.log('[SW] Deleting old cache:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      })
      .then(() => {
        console.log('[SW] Service worker activated');
        // Take control of all pages immediately
        return self.clients.claim();
      })
      .catch((error) => {
        console.error('[SW] Failed to activate service worker:', error);
      })
  );
});

// Fetch event - implement caching strategies
self.addEventListener('fetch', (event) => {
  const request = event.request;
  const url = new URL(request.url);
  
  // Only handle GET requests
  if (request.method !== 'GET') {
    return;
  }
  
  // Bypass cache for certain endpoints
  if (BYPASS_CACHE.some(pattern => url.pathname.includes(pattern))) {
    return;
  }
  
  // Handle different types of requests with appropriate strategies
  if (url.pathname.startsWith('/api/')) {
    // API requests - Network First with cache fallback
    event.respondWith(handleApiRequest(request));
  } else if (isStaticResource(url.pathname)) {
    // Static resources - Cache First
    event.respondWith(handleStaticRequest(request));
  } else {
    // Dynamic content - Stale While Revalidate
    event.respondWith(handleDynamicRequest(request));
  }
});

// Handle API requests with Network First strategy
async function handleApiRequest(request) {
  const url = new URL(request.url);
  const cacheName = API_CACHE;
  
  try {
    // Try network first
    const networkResponse = await fetch(request);
    
    if (networkResponse.ok) {
      // Cache successful responses for cacheable APIs
      if (CACHEABLE_APIS.some(pattern => url.pathname.includes(pattern))) {
        const cache = await caches.open(cacheName);
        // Clone the response before caching
        cache.put(request, networkResponse.clone());
      }
      return networkResponse;
    }
    
    // If network fails, try cache
    return await getCachedResponse(request, cacheName);
  } catch (error) {
    console.log('[SW] Network failed for API request, trying cache:', url.pathname);
    
    // Network failed, try cache
    const cachedResponse = await getCachedResponse(request, cacheName);
    
    if (cachedResponse) {
      return cachedResponse;
    }
    
    // Return offline fallback for critical APIs
    return createOfflineFallback(url.pathname);
  }
}

// Handle static resources with Cache First strategy
async function handleStaticRequest(request) {
  const cacheName = STATIC_CACHE;
  
  try {
    // Try cache first
    const cachedResponse = await getCachedResponse(request, cacheName);
    
    if (cachedResponse) {
      return cachedResponse;
    }
    
    // If not in cache, fetch from network and cache
    const networkResponse = await fetch(request);
    
    if (networkResponse.ok) {
      const cache = await caches.open(cacheName);
      cache.put(request, networkResponse.clone());
    }
    
    return networkResponse;
  } catch (error) {
    console.log('[SW] Failed to load static resource:', request.url);
    
    // For HTML requests, return the main app shell
    if (request.headers.get('accept')?.includes('text/html')) {
      return caches.match('/index.html');
    }
    
    throw error;
  }
}

// Handle dynamic content with Stale While Revalidate strategy
async function handleDynamicRequest(request) {
  const cacheName = DYNAMIC_CACHE;
  
  try {
    // Get cached version if available
    const cachedResponse = await getCachedResponse(request, cacheName);
    
    // Fetch fresh version in background
    const networkPromise = fetch(request)
      .then((networkResponse) => {
        if (networkResponse.ok) {
          const cache = caches.open(cacheName);
          cache.then(c => c.put(request, networkResponse.clone()));
        }
        return networkResponse;
      })
      .catch(() => null);
    
    // Return cached version immediately if available
    if (cachedResponse) {
      return cachedResponse;
    }
    
    // Otherwise wait for network response
    return await networkPromise;
  } catch (error) {
    console.log('[SW] Failed to load dynamic content:', request.url);
    
    // Return app shell for navigation requests
    if (request.headers.get('accept')?.includes('text/html')) {
      return caches.match('/index.html');
    }
    
    throw error;
  }
}

// Get cached response with expiration check
async function getCachedResponse(request, cacheName) {
  const cache = await caches.open(cacheName);
  const cachedResponse = await cache.match(request);
  
  if (!cachedResponse) {
    return null;
  }
  
  // Check if cached response is still valid
  const cachedTime = new Date(cachedResponse.headers.get('sw-cache-time') || 0);
  const maxAge = CACHE_MAX_AGE[cacheName.includes('static') ? 'static' : 
                              cacheName.includes('api') ? 'api' : 'dynamic'];
  
  if (Date.now() - cachedTime.getTime() > maxAge) {
    // Cache expired, remove it
    cache.delete(request);
    return null;
  }
  
  return cachedResponse;
}

// Create offline fallback responses
function createOfflineFallback(pathname) {
  if (pathname.includes('/products')) {
    return new Response(JSON.stringify({
      success: false,
      data: [],
      message: 'You are offline. Showing cached products.',
      offline: true
    }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });
  }
  
  if (pathname.includes('/cart')) {
    return new Response(JSON.stringify({
      success: false,
      data: { items: [], totalItems: 0, totalPrice: 0 },
      message: 'You are offline. Cart data may not be current.',
      offline: true
    }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });
  }
  
  // Generic offline response
  return new Response(JSON.stringify({
    success: false,
    message: 'You are offline. Please check your connection.',
    offline: true
  }), {
    status: 503,
    headers: { 'Content-Type': 'application/json' }
  });
}

// Check if URL is for a static resource
function isStaticResource(pathname) {
  const staticExtensions = ['.js', '.css', '.png', '.jpg', '.jpeg', '.gif', '.svg', '.ico', '.woff', '.woff2'];
  return staticExtensions.some(ext => pathname.endsWith(ext)) || 
         pathname === '/' || 
         pathname === '/index.html';
}

// Message handling for cache management
self.addEventListener('message', (event) => {
  const { type, data } = event.data || {};
  
  switch (type) {
    case 'SKIP_WAITING':
      self.skipWaiting();
      break;
      
    case 'GET_VERSION':
      event.ports[0].postMessage({ version: CACHE_NAME });
      break;
      
    case 'CLEAR_CACHE':
      clearCache(data?.cacheName || 'all')
        .then(() => event.ports[0].postMessage({ success: true }))
        .catch((error) => event.ports[0].postMessage({ success: false, error: error.message }));
      break;
      
    case 'CACHE_URLS':
      cacheUrls(data?.urls || [])
        .then(() => event.ports[0].postMessage({ success: true }))
        .catch((error) => event.ports[0].postMessage({ success: false, error: error.message }));
      break;
      
    default:
      console.log('[SW] Unknown message type:', type);
  }
});

// Clear cache utility
async function clearCache(cacheName = 'all') {
  if (cacheName === 'all') {
    const cacheNames = await caches.keys();
    return Promise.all(cacheNames.map(name => caches.delete(name)));
  }
  
  return caches.delete(cacheName);
}

// Cache URLs utility
async function cacheUrls(urls) {
  const cache = await caches.open(DYNAMIC_CACHE);
  return cache.addAll(urls);
}

// Background sync for form submissions (future enhancement)
self.addEventListener('sync', (event) => {
  if (event.tag === 'background-sync') {
    event.waitUntil(doBackgroundSync());
  }
});

async function doBackgroundSync() {
  // Handle queued requests when back online
  console.log('[SW] Background sync triggered');
  
  // This would typically process queued cart updates, order submissions, etc.
  // For now, just log that sync occurred
}

// Push notifications (future enhancement)
self.addEventListener('push', (event) => {
  if (event.data) {
    const data = event.data.json();
    
    const options = {
      body: data.body,
      icon: '/icon-192.png',
      badge: '/badge-72.png',
      vibrate: [100, 50, 100],
      data: {
        dateOfArrival: Date.now(),
        primaryKey: data.primaryKey || '1'
      },
      actions: [
        {
          action: 'explore',
          title: 'View Details',
          icon: '/icon-explore.png'
        },
        {
          action: 'close',
          title: 'Close',
          icon: '/icon-close.png'
        }
      ]
    };
    
    event.waitUntil(
      self.registration.showNotification(data.title, options)
    );
  }
});

// Notification click handling
self.addEventListener('notificationclick', (event) => {
  event.notification.close();
  
  if (event.action === 'explore') {
    // Open the app to specific page
    event.waitUntil(
      clients.openWindow('/')
    );
  }
});

console.log('[SW] Service Worker script loaded');